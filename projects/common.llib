local ffi = require("ffi")
ffi.cdef[[
typedef struct { uint8_t r, g, b, a; } rgba_pixel;
typedef struct { float r, g, b,a; } float_pixel;
typedef struct { float r, g; } float_half_pixel;
]]

function make_buffer( typename,type_id,default_pixel )
	return function(w,h)
		local img={d=ffi.new(typename.."[?]",w*h),w=w,h=h,type=type_id}
		img.pixel=function ( init )
			return ffi.new(typename,init or default_pixel)
		end
		img.set=function ( t,x,y,v )
			t.d[x+t.w*y]=v
		end
		img.get=function ( t,x,y )
			return t.d[x+t.w*y]
		end
		if type_id==0 then
			img.present=function ( t )
				__present(t)
			end
		end
		img.read_frame=function ( t )
			__read_fb(t.d,t.w,t.h)
		end
		img.save=function ( t,path,suffix )
			__save_png(t,path,suffix,true)
		end
		img.clear=function ( t,c )
			local pix=c or t.pixel()
			for x=0,w-1 do
			for y=0,h-1 do
				t:set(x,y,pix)
			end
			end
		end
		img.write_texture=function(t, tex )
			tex:set(t.d,t.w,t.h,t.type)
		end
		img.read_texture=function(t, tex )
			tex:read(t.d,t.w,t.h,t.type)
		end
		return img
	end
end

make_image_buffer= make_buffer("rgba_pixel",0,{0,0,0,255})
make_flt_buffer= make_buffer("float_pixel",1,{0,0,0,1})
make_float_buffer=make_buffer("float",2,0)
make_flt_half_buffer=make_buffer("float_half_pixel",3,{0,0})
make_char_buffer=make_buffer("uint8_t",4,0)
-------------GUI

function make_config(tbl,defaults)
	local ret={}
	defaults=defaults or {}
	for i,v in ipairs(tbl) do
		if defaults[v[1]]==nil then
			ret[v[1]]= v[2]
		else
			ret[v[1]]=defaults[v[1]]
		end
		ret[i]=v
	end
	return ret
end

function draw_config( tbl )
	for _,entry in ipairs(tbl) do
		local name=entry[1]
		local v=tbl[name]
		local k=name
		if type(v)=="boolean" then
			if imgui.RadioButton(k,tbl[k]) then
				tbl[k]=not tbl[k]
			end
		elseif type(v)=="string" then
			local changing
			changing,tbl[k]=imgui.InputText(k,tbl[k])
			entry.changing=changing
		else --if type(v)~="table" then
			
			if entry.type=="int" then
				local changing
				changing,tbl[k]=imgui.SliderInt(k,tbl[k],entry.min or 0,entry.max or 100)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("Random##"..k) then
					entry.changing=true
					tbl[k]=math.random(entry.min or 0,entry.max or 100)
				end
			elseif entry.type=="float" then
				local changing
				changing,tbl[k]=imgui.SliderFloat(k,tbl[k],entry.min or 0,entry.max or 1)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("Random##"..k) then
					entry.changing=true
					local mm=entry.max or 1
					local mi=entry.min or 0
					tbl[k]=math.random()*(mm-mi)+mi
				end
			elseif entry.type=="angle" then
				local changing
				changing,tbl[k]=imgui.SliderAngle(k,tbl[k],entry.min or 0,entry.max or 360)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("Random##"..k) then
					entry.changing=true
					local mm=entry.max or 360
					local mi=entry.min or 0
					tbl[k]=math.random()*(mm-mi)+mi
				end
			elseif entry.type=="color" then
				local changing
				changing,tbl[k]=imgui.ColorEdit4(k,tbl[k],true)
				entry.changing=changing
				imgui.SameLine()
				if imgui.Button("Random##"..k) then
					entry.changing=true
					local mm=entry.max or 1
					local mi=entry.min or 0
					tbl[k]={math.random(),math.random(),math.random(),1}
				end
			end
		
		end
	end
end
function is_mouse_down(  )
	return __mouse.clicked0 and not __mouse.owned0, __mouse.x,__mouse.y
end

------------MISC

function make_copy( tbl )
	local ret={}
	for k,v in pairs(tbl) do
		ret[k]=v
	end
	return ret
end

function gaussian (mean, variance)
    return  math.sqrt(-2 * variance * math.log(math.random())) *
            math.cos(2 * math.pi * math.random()) + mean
end